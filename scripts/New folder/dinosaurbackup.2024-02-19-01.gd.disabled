#provides enums and classes for use in other scripts
#no logic or tracking will be done here
#maybe methods, but only for internal use

# i don't know enough about dinosaurs to fill this out, but add their species here
enum DinosaurTypes{
	NOTYPE,
	DEVIN,
	KEVIN,
	VELOCIRAPTOR,
	TRICERATOPS,
	TYRANNOSAURUS_REX
}

# these are just dnd5e dnmage types, replace with w/e
enum DamageTypes{
	ACID,
	BLUDGEONING,
	COLD,
	FIRE,
	FORCE,
	LIGHTNING,
	NECROTIC,
	PIERCING,
	POISON,
	PSYCHIC,
	RADIANT,
	SLASHING,
	THUNDER
}
enum Conditions{}
#tbd if we even need these
enum Spells{}
enum Items{}


enum Actions{
	ATTACK,
	USE_ITEM,
	USE_SPECIAL
}

class Dinosaur:
	var DINO_DATA = {
		"dino_name": "NO_NAME",
		"dino_type": DinosaurTypes.NOTYPE
	}
	
	var STAMINA = {
		"stamina": 10,
		"stamina_regen": 10,
		"regen_at_start": true
	}
	
	var HEALTH = {
		"max_health": 100.0,
		"starting_health": 100.0,
		"min_health": 0.0,
		"current_health": "starting_health"
	}
	
	var ARMOR = {
		"armour_flat": 0.0,
		"armour_percent": 0.0
	}
	
	
	
	var STATS = {
		
		
		
		
		"current_condition": [],
		
		"is_dead": false,
		
		"is_flipped_h": false,
		"is_flipped_v": false,
		"rotation": 0.0
	}
	var ACTIONS = {
		"standard_attacks": [],
		"special_attacks": []
	}
	var INVENTORY = {
		"items": [],
		"spells": []
	}

	var stats_to_act_on = []
	#takes another instance of the same class and uses it to set some stats
	func sync_all(other_class: Dinosaur):
		sync_identity(other_class)
		sync_stamina(other_class)
		sync_health(other_class)
		sync_armor(other_class)
		sync_attacks(other_class)
		sync_moves(other_class)
		sync_condition(other_class)
		sync_is_dead(other_class)
		sync_rotate_and_flip(other_class)
	func sync_identity(other_class: Dinosaur):
		self.dino_name = other_class.dino_name
		self.dino_type = other_class.dino_type
	func sync_stamina(other_class: Dinosaur):
		self.stamina = other_class.stamina
		self.stamina_regen = other_class.stamina_regen
		self.regen_at_start = other_class.regen_at_start
	func sync_health(other_class: Dinosaur):
		self.max_health = other_class.max_health
		self.starting_health = other_class.starting_health
		self.min_health = other_class.min_health
		self.current_health = other_class.current_health
	func sync_armor(other_class: Dinosaur):
		self.armour_flat = other_class.armour_percent
		self.armour_percent = other_class.armour_percent
	func sync_attacks(other_class: Dinosaur):
		self.standard_attacks = other_class.standard_attacks
		self.special_attacks = other_class.special_attacks
	func sync_moves(other_class: Dinosaur):
		self.items = other_class.items
		self.spells = other_class.spells
	func sync_condition(other_class: Dinosaur):
		self.current_condition = other_class.current_condition
	func sync_is_dead(other_class: Dinosaur):
		self.is_dead = other_class.is_dead
	func sync_rotate_and_flip(other_class: Dinosaur):
		self.rotation = other_class.rotation
		self.is_flipped_h = other_class.is_flipped_h
		self.is_flipped_v = other_class.is_flipped_v
	
#use this to set the base stats for your dinosaur
	func populate_stats(
		dino_name: String, dino_type: DinosaurTypes,
		max_health: float, starting_health: float, min_health: float,
		armour_flat: float, armour_percent: float,
		attack_damage: float, damage_multiplier: float,
		healing_amount: float, over_healing_amount: float
	):
		self.dino_name = dino_name
		self.dino_type = dino_type
		
		self.max_health = max_health
		self.starting_health = starting_health
		self.min_health = min_health
		
		self.armour_flat = armour_flat
		self.armour_percent = armour_percent
		
		self.attack_damage = attack_damage
		self.damage_multiplier = damage_multiplier
		
		self.healing_amount = healing_amount
		self.over_healing_amount = over_healing_amount
		
		self.current_health = starting_health
	
	#these functions below are used to provide internal logic for the stats
	#these functions will be universal for all dinosaurs
	
	func calc_damage(incoming_damage:float) -> float:
		return (incoming_damage * (1.0 - self.armour_percent)) - self.armour_flat
		#return (incoming_damage - self.armour_flat) * (1.0 - self.armour_percent)
	
	#call this function to damage the dinosaur
	func damage_dinosaur(damage:float):
		if self.current_health <= self.min_health:
			pass
		elif self.current_health - damage <= self.min_health:
			self.current_health = self.min_health
		else: self.current_health -= damage

	#call this function to heal the dinosaur
	func heal_dinosaur(heal_amount:float):
		if self.current_health >= self.max_health:
			pass
		elif self.current_health + heal_amount >= self.max_health:
			self.current_health = self.max_health
		else: self.current_health += heal_amount

	#call this function to over damage the dinosaur
	func over_heal_dinosaur(heal_amount:float):
		self.current_health += heal_amount
		
	#call this function to over heal the dinosaur
	func over_damage_dinosaur(damage:float):
		self.current_health -= damage

	#call this function to fade over heal the dinosaur
	func over_heal_fade(fade_amount:float):
		if self.current_health - fade_amount >= self.max_health:
			self.current_health -= fade_amount 
		elif self.current_health >= self.max_health:
			self.current_health = self.max_health
